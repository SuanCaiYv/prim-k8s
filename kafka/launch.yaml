apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: kafka-mq
spec:
  serviceName: kafka-mq-service
  replicas: 3
  selector:
    matchLabels:
      app: kafka
      appCluster: kafka-cluster
  template:
    metadata:
      labels:
        app: kafka
        appCluster: kafka-cluster
    spec:
      initContainers:
        - name: format-storage
          image: codewithbuff/kafka:0.1.2
          volumeMounts:
            - name: kafka-data
              mountPath: /kafka/data
            - name: kafka-config
              mountPath: /kafka/tmp
          command:
            - /bin/sh
            - -c
            - cp /kafka/tmp/init.sh /etc/init.sh; chmod +x /etc/init.sh; /etc/init.sh
      containers:
        - name: kafka
          image: codewithbuff/kafka:0.1.2
          ports:
            - containerPort: 9092
            - containerPort: 9093
          volumeMounts:
            - name: kafka-data
              mountPath: /kafka/data
            - name: kafka-config
              mountPath: /kafka/tmp
      volumes:
        - name: kafka-data
          persistentVolumeClaim:
            claimName: kafka-pvc
        - name: kafka-config
          configMap:
            name: kafka-config
            items:
              - key: server.properties
                path: server.properties
              - key: cluster.id
                path: cluster.id
              - key: init.sh
                path: init.sh
              - key: set-node-id.sh
                path: set-node-id.sh
  volumeClaimTemplates:
    - metadata:
        name: kafka-data
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: kafka-storage
        resources:
          requests:
            storage: 5Gi
